"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default = False, cast=bool)

# Leerá una variable ALLOWED_HOSTS (que en Render será algo 
# como tunombre-de-proyecto.onrender.com), y si no la encuentra, 
# usará 127.0.0.1 por defecto para que siga funcionando en local. 
# El .split(',') nos permite poner varios dominios separados por comas.
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages', # framework de mensaje de django
    'django.contrib.staticfiles',
    'publicaciones', # registrando mi app publicaciones
    'usuarios', # registrando mi app usuarios
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # agregando la ruta de la funcion creada en el context processors de mi app publicaciones
                'publicaciones.context_processors.menu_categorias', 
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

# Búsqueda de la variable DATABASE_URL en el entorno
database_url = config('DATABASE_URL', default=None)

if database_url:
    # Si se encuentra DATABASE_URL (estamos en producción en Render), la usamos
    DATABASES = {
        'default': dj_database_url.parse(database_url)
    }
else:
    # Si no (estamos en local), usamos las variables DB_* de nuestro .env
    print("DATABASE_URL no encontrada, usando configuración local de la base de datos.")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME'), # nombre de la base de datos
            'USER': config('DB_USER'), # usuario en postgresql
            'PASSWORD': config('DB_PASSWORD'), # contrase;a del usuario
            'HOST': config('DB_HOST'),
            'PORT': config('DB_PORT'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'America/Santo_Domingo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# STATIC_ROOT: Le dice a Django dónde debe recopilar todos los archivos estáticos de todas 
# tus apps en una sola carpeta cuando lo despliegues. 
# El comando collectstatic usará esta ruta.
STATIC_ROOT = BASE_DIR / 'staticfiles'

#STATICFILES_STORAGE: Le dice a Django que use WhiteNoise para gestionar 
# los archivos estáticos, lo que incluye comprimirlos y 
# cachearlos de forma inteligente.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Redirecciones de Autenticación
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'